name: Build
on:
  pull_request:
  push:
    branches:
      - 'main'
    paths:
      - '**.nix'
      - '.github/workflows/*.yml'
jobs:
  determine-matrix:
    name: 'Find packages'
    runs-on: ubuntu-latest
    outputs:
      packages: '${{ steps.set-packages.outputs.packages }}'
    steps:
      - name: 'Set up Git repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@v12
      - name: 'Build packages matrix'
        id: set-packages
        run: |
          echo packages=$(
            nix flake show --json | jq '.packages["x86_64-linux"]' | jq 'keys'
          ) >> $GITHUB_OUTPUT
  build:
    name: '${{ matrix.packages }} on ${{ matrix.archs.arch }}'
    needs: [determine-matrix]
    runs-on: '${{ matrix.archs.os }}'
    strategy:
      fail-fast: false
      matrix:
        packages: '${{fromJson(needs.determine-matrix.outputs.packages)}}'
        archs: [{os: ubuntu-latest, arch: x86_64-linux}]
    steps:
      - name: 'Set up Git repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@main
      - name: 'Run the Magic Nix Cache'
        uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: opentelemetry
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: 'Build ${{ matrix.packages }} binary'
        run: |
          nix build .#${{ matrix.packages }} -L
  tests-build:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tests
    steps:
      - name: 'Set up Git repository'
        uses: actions/checkout@v4
      - name: 'Install Nix'
        uses: DeterminateSystems/nix-installer-action@v12
      - name: 'Flake Build'
        run: |
          nix build -L
